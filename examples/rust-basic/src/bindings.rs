// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod wasmpath {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod game {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Position {
                pub row: u32,
                pub column: u32,
            }
            impl ::core::fmt::Debug for Position {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Position")
                        .field("row", &self.row)
                        .field("column", &self.column)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct State {
                handle: _rt::Resource<State>,
            }
            impl State {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for State {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:wasmpath/game@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]state"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl State {
                #[allow(unused_unsafe, clippy::all)]
                pub fn log_state(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wasmpath/game@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]state.log-state"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            impl State {
                #[allow(unused_unsafe, clippy::all)]
                /// get target position in the grid
                pub fn target_position(&self) -> Position {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wasmpath/game@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]state.target-position"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<i32>();
                        let l3 = *ptr0.add(4).cast::<i32>();
                        let result4 = Position {
                            row: l2 as u32,
                            column: l3 as u32,
                        };
                        result4
                    }
                }
            }
            impl State {
                #[allow(unused_unsafe, clippy::all)]
                /// get player position in the grid
                pub fn player_position(&self) -> Position {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wasmpath/game@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]state.player-position"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<i32>();
                        let l3 = *ptr0.add(4).cast::<i32>();
                        let result4 = Position {
                            row: l2 as u32,
                            column: l3 as u32,
                        };
                        result4
                    }
                }
            }
            impl State {
                #[allow(unused_unsafe, clippy::all)]
                /// get adjacent cells (left, right, up, and left) of provided cell position
                pub fn adjacent_cells(&self, cell: Position) -> _rt::Vec<Position> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let Position { row: row0, column: column0 } = cell;
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wasmpath/game@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]state.adjacent-cells"]
                            fn wit_import2(_: i32, _: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                _rt::as_i32(row0),
                                _rt::as_i32(column0),
                                ptr1,
                            )
                        };
                        let l3 = *ptr1.add(0).cast::<*mut u8>();
                        let l4 = *ptr1
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len5 = l4;
                        let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                        result6
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod wasmpath {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod solution {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type State = super::super::super::super::component::wasmpath::game::State;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum Direction {
                    Up,
                    Down,
                    Left,
                    Right,
                }
                impl ::core::fmt::Debug for Direction {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Direction::Up => f.debug_tuple("Direction::Up").finish(),
                            Direction::Down => f.debug_tuple("Direction::Down").finish(),
                            Direction::Left => f.debug_tuple("Direction::Left").finish(),
                            Direction::Right => {
                                f.debug_tuple("Direction::Right").finish()
                            }
                        }
                    }
                }
                impl Direction {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Direction {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => Direction::Up,
                            1 => Direction::Down,
                            2 => Direction::Left,
                            3 => Direction::Right,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Solver {
                    handle: _rt::Resource<Solver>,
                }
                type _SolverRep<T> = Option<T>;
                impl Solver {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Solver`.
                    pub fn new<T: GuestSolver>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SolverRep<T> = Some(val);
                        let ptr: *mut _SolverRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSolver>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSolver>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSolver>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _SolverRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestSolver>(&self) -> *mut _SolverRep<T> {
                        Solver::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Solver`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SolverBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Solver>,
                }
                impl<'a> SolverBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSolver>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _SolverRep<T> {
                        Solver::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Solver {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasmpath/solution@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]solver"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_solver_cabi<T: GuestSolver>(
                    arg0: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = Solver::new(
                        T::new({
                            handle0 = unsafe {
                                super::super::super::super::component::wasmpath::game::State::from_handle(
                                    arg0 as u32,
                                )
                            };
                            &handle0
                        }),
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_solver_step_cabi<T: GuestSolver>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::step(
                        unsafe { SolverBorrow::lift(arg0 as u32 as usize) }.get(),
                        {
                            handle0 = unsafe {
                                super::super::super::super::component::wasmpath::game::State::from_handle(
                                    arg1 as u32,
                                )
                            };
                            &handle0
                        },
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                pub trait Guest {
                    type Solver: GuestSolver;
                }
                pub trait GuestSolver: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasmpath/solution@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]solver"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasmpath/solution@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]solver"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(state: &State) -> Self;
                    fn step(&self, state: &State) -> Option<Direction>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_wasmpath_solution_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:wasmpath/solution@0.1.0#[constructor]solver")] unsafe
                        extern "C" fn export_constructor_solver(arg0 : i32,) -> i32 {
                        unsafe { $($path_to_types)*::
                        _export_constructor_solver_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Solver > (arg0) } } #[unsafe (export_name =
                        "component:wasmpath/solution@0.1.0#[method]solver.step")] unsafe
                        extern "C" fn export_method_solver_step(arg0 : * mut u8, arg1 :
                        i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_solver_step_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Solver > (arg0, arg1) } } const _ : () = {
                        #[doc(hidden)] #[unsafe (export_name =
                        "component:wasmpath/solution@0.1.0#[dtor]solver")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Solver::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Solver > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_wasmpath_solution_0_1_0_cabi;
                #[repr(align(1))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 2]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_wasm_path_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::wasmpath::solution::__export_component_wasmpath_solution_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::wasmpath::solution);
    };
}
#[doc(inline)]
pub(crate) use __export_wasm_path_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:wasmpath@0.1.0:wasm-path:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 629] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf5\x03\x01A\x02\x01\
A\x05\x01B\x0c\x01r\x02\x03rowy\x06columny\x04\0\x08position\x03\0\0\x04\0\x05st\
ate\x03\x01\x01h\x02\x01@\x01\x04self\x03\x01\0\x04\0\x17[method]state.log-state\
\x01\x04\x01@\x01\x04self\x03\0\x01\x04\0\x1d[method]state.target-position\x01\x05\
\x04\0\x1d[method]state.player-position\x01\x05\x01p\x01\x01@\x02\x04self\x03\x04\
cell\x01\0\x06\x04\0\x1c[method]state.adjacent-cells\x01\x07\x03\0\x1dcomponent:\
wasmpath/game@0.1.0\x05\0\x02\x03\0\0\x05state\x01B\x0d\x02\x03\x02\x01\x01\x04\0\
\x05state\x03\0\0\x01m\x04\x02up\x04down\x04left\x05right\x04\0\x09direction\x03\
\0\x02\x04\0\x06solver\x03\x01\x01h\x01\x01i\x04\x01@\x01\x05state\x05\0\x06\x04\
\0\x13[constructor]solver\x01\x07\x01h\x04\x01k\x03\x01@\x02\x04self\x08\x05stat\
e\x05\0\x09\x04\0\x13[method]solver.step\x01\x0a\x04\0!component:wasmpath/soluti\
on@0.1.0\x05\x02\x04\0\"component:wasmpath/wasm-path@0.1.0\x04\0\x0b\x0f\x01\0\x09\
wasm-path\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.\
227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
